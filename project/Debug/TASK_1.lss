
TASK_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000328  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000328  000003bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800068  00800068  000003c4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003c4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000430  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000faf  00000000  00000000  00000538  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009ef  00000000  00000000  000014e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008a8  00000000  00000000  00001ed6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000024c  00000000  00000000  00002780  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005a1  00000000  00000000  000029cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007c4  00000000  00000000  00002f6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00003731  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e2       	ldi	r30, 0x28	; 40
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 36       	cpi	r26, 0x6A	; 106
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <main>
  8a:	0c 94 92 01 	jmp	0x324	; 0x324 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <HDIO_SetPinDirection_vid>:
 * Created: 10/15/2022 5:52:40 PM
 *  Author: moust
 */ 
#include "../header/HDIO.h"
void HDIO_SetPinDirection_vid (u8 PORT , u8 PIN , u8 direction)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	00 d0       	rcall	.+0      	; 0x98 <HDIO_SetPinDirection_vid+0x6>
  98:	00 d0       	rcall	.+0      	; 0x9a <HDIO_SetPinDirection_vid+0x8>
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
	DIO_cfg cfg = {PORT , PIN , direction};
  9e:	19 82       	std	Y+1, r1	; 0x01
  a0:	1a 82       	std	Y+2, r1	; 0x02
  a2:	1b 82       	std	Y+3, r1	; 0x03
  a4:	1c 82       	std	Y+4, r1	; 0x04
  a6:	89 83       	std	Y+1, r24	; 0x01
  a8:	6a 83       	std	Y+2, r22	; 0x02
  aa:	4b 83       	std	Y+3, r20	; 0x03
	DIO_SetPinDirection(&cfg);
  ac:	ce 01       	movw	r24, r28
  ae:	01 96       	adiw	r24, 0x01	; 1
  b0:	0e 94 21 01 	call	0x242	; 0x242 <DIO_SetPinDirection>
}
  b4:	0f 90       	pop	r0
  b6:	0f 90       	pop	r0
  b8:	0f 90       	pop	r0
  ba:	0f 90       	pop	r0
  bc:	df 91       	pop	r29
  be:	cf 91       	pop	r28
  c0:	08 95       	ret

000000c2 <HDIO_ReadPinValue_u8>:
u8   HDIO_ReadPinValue_u8(u8 PORT , u8 PIN)
{
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
  c6:	00 d0       	rcall	.+0      	; 0xc8 <HDIO_ReadPinValue_u8+0x6>
  c8:	00 d0       	rcall	.+0      	; 0xca <HDIO_ReadPinValue_u8+0x8>
  ca:	cd b7       	in	r28, 0x3d	; 61
  cc:	de b7       	in	r29, 0x3e	; 62
	u8 PinState = 0;
	DIO_cfg cfg = {PORT , PIN};
  ce:	19 82       	std	Y+1, r1	; 0x01
  d0:	1a 82       	std	Y+2, r1	; 0x02
  d2:	1b 82       	std	Y+3, r1	; 0x03
  d4:	1c 82       	std	Y+4, r1	; 0x04
  d6:	89 83       	std	Y+1, r24	; 0x01
  d8:	6a 83       	std	Y+2, r22	; 0x02
	PinState = DIO_ReadPinValue(&cfg);
  da:	ce 01       	movw	r24, r28
  dc:	01 96       	adiw	r24, 0x01	; 1
  de:	0e 94 4d 01 	call	0x29a	; 0x29a <DIO_ReadPinValue>
	return PinState;
}
  e2:	0f 90       	pop	r0
  e4:	0f 90       	pop	r0
  e6:	0f 90       	pop	r0
  e8:	0f 90       	pop	r0
  ea:	df 91       	pop	r29
  ec:	cf 91       	pop	r28
  ee:	08 95       	ret

000000f0 <HDIO_SetPinValue_vid>:
void HDIO_SetPinValue_vid(u8 PORT , u8 PIN , u8 state)
{
  f0:	cf 93       	push	r28
  f2:	df 93       	push	r29
  f4:	00 d0       	rcall	.+0      	; 0xf6 <HDIO_SetPinValue_vid+0x6>
  f6:	00 d0       	rcall	.+0      	; 0xf8 <HDIO_SetPinValue_vid+0x8>
  f8:	cd b7       	in	r28, 0x3d	; 61
  fa:	de b7       	in	r29, 0x3e	; 62
	DIO_cfg cfg = {PORT , PIN};
  fc:	19 82       	std	Y+1, r1	; 0x01
  fe:	1a 82       	std	Y+2, r1	; 0x02
 100:	1b 82       	std	Y+3, r1	; 0x03
 102:	1c 82       	std	Y+4, r1	; 0x04
 104:	89 83       	std	Y+1, r24	; 0x01
 106:	6a 83       	std	Y+2, r22	; 0x02
	DIO_SetPinValue(&cfg , state);
 108:	64 2f       	mov	r22, r20
 10a:	ce 01       	movw	r24, r28
 10c:	01 96       	adiw	r24, 0x01	; 1
 10e:	0e 94 66 01 	call	0x2cc	; 0x2cc <DIO_SetPinValue>
}
 112:	0f 90       	pop	r0
 114:	0f 90       	pop	r0
 116:	0f 90       	pop	r0
 118:	0f 90       	pop	r0
 11a:	df 91       	pop	r29
 11c:	cf 91       	pop	r28
 11e:	08 95       	ret

00000120 <SEVEN_SEGMENT_init>:
 */ 

#include "seven_segment.h"

#if mode == common_Cathode
void SEVEN_SEGMENT_init(SEVEN_SEGMENT_Config *Sev_seg){
 120:	0f 93       	push	r16
 122:	1f 93       	push	r17
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	8c 01       	movw	r16, r24
	for(int i=0;i<4;i++){
 12a:	c0 e0       	ldi	r28, 0x00	; 0
 12c:	d0 e0       	ldi	r29, 0x00	; 0
 12e:	0b c0       	rjmp	.+22     	; 0x146 <SEVEN_SEGMENT_init+0x26>
		HDIO_SetPinDirection_vid (Sev_seg->SEVEN_SEGMENT_PINS[i].port,  
 130:	fe 01       	movw	r30, r28
 132:	ee 0f       	add	r30, r30
 134:	ff 1f       	adc	r31, r31
 136:	e0 0f       	add	r30, r16
 138:	f1 1f       	adc	r31, r17
 13a:	41 e0       	ldi	r20, 0x01	; 1
 13c:	61 81       	ldd	r22, Z+1	; 0x01
 13e:	80 81       	ld	r24, Z
 140:	0e 94 49 00 	call	0x92	; 0x92 <HDIO_SetPinDirection_vid>

#include "seven_segment.h"

#if mode == common_Cathode
void SEVEN_SEGMENT_init(SEVEN_SEGMENT_Config *Sev_seg){
	for(int i=0;i<4;i++){
 144:	21 96       	adiw	r28, 0x01	; 1
 146:	c4 30       	cpi	r28, 0x04	; 4
 148:	d1 05       	cpc	r29, r1
 14a:	94 f3       	brlt	.-28     	; 0x130 <SEVEN_SEGMENT_init+0x10>
		HDIO_SetPinDirection_vid (Sev_seg->SEVEN_SEGMENT_PINS[i].port,  
		                          Sev_seg->SEVEN_SEGMENT_PINS[i].pin,DIO_OUT);
	}
}
 14c:	df 91       	pop	r29
 14e:	cf 91       	pop	r28
 150:	1f 91       	pop	r17
 152:	0f 91       	pop	r16
 154:	08 95       	ret

00000156 <SEVEN_SEGMENT_write_value>:
void SEVEN_SEGMENT_write_value(SEVEN_SEGMENT_Config *Sev_seg,u8 value){
 156:	ff 92       	push	r15
 158:	0f 93       	push	r16
 15a:	1f 93       	push	r17
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
 160:	8c 01       	movw	r16, r24
 162:	f6 2e       	mov	r15, r22
	for (int i=0;i<4;i++){
 164:	c0 e0       	ldi	r28, 0x00	; 0
 166:	d0 e0       	ldi	r29, 0x00	; 0
 168:	13 c0       	rjmp	.+38     	; 0x190 <SEVEN_SEGMENT_write_value+0x3a>
	  HDIO_SetPinValue_vid (Sev_seg->SEVEN_SEGMENT_PINS[i].port,
	                        Sev_seg->SEVEN_SEGMENT_PINS[i].pin,
						    ((value>>i)&0x01));
 16a:	4f 2d       	mov	r20, r15
 16c:	50 e0       	ldi	r21, 0x00	; 0
 16e:	0c 2e       	mov	r0, r28
 170:	02 c0       	rjmp	.+4      	; 0x176 <SEVEN_SEGMENT_write_value+0x20>
 172:	55 95       	asr	r21
 174:	47 95       	ror	r20
 176:	0a 94       	dec	r0
 178:	e2 f7       	brpl	.-8      	; 0x172 <SEVEN_SEGMENT_write_value+0x1c>
		                          Sev_seg->SEVEN_SEGMENT_PINS[i].pin,DIO_OUT);
	}
}
void SEVEN_SEGMENT_write_value(SEVEN_SEGMENT_Config *Sev_seg,u8 value){
	for (int i=0;i<4;i++){
	  HDIO_SetPinValue_vid (Sev_seg->SEVEN_SEGMENT_PINS[i].port,
 17a:	41 70       	andi	r20, 0x01	; 1
 17c:	fe 01       	movw	r30, r28
 17e:	ee 0f       	add	r30, r30
 180:	ff 1f       	adc	r31, r31
 182:	e0 0f       	add	r30, r16
 184:	f1 1f       	adc	r31, r17
 186:	61 81       	ldd	r22, Z+1	; 0x01
 188:	80 81       	ld	r24, Z
 18a:	0e 94 78 00 	call	0xf0	; 0xf0 <HDIO_SetPinValue_vid>
		HDIO_SetPinDirection_vid (Sev_seg->SEVEN_SEGMENT_PINS[i].port,  
		                          Sev_seg->SEVEN_SEGMENT_PINS[i].pin,DIO_OUT);
	}
}
void SEVEN_SEGMENT_write_value(SEVEN_SEGMENT_Config *Sev_seg,u8 value){
	for (int i=0;i<4;i++){
 18e:	21 96       	adiw	r28, 0x01	; 1
 190:	c4 30       	cpi	r28, 0x04	; 4
 192:	d1 05       	cpc	r29, r1
 194:	54 f3       	brlt	.-44     	; 0x16a <SEVEN_SEGMENT_write_value+0x14>
	  HDIO_SetPinValue_vid (Sev_seg->SEVEN_SEGMENT_PINS[i].port,
	                        Sev_seg->SEVEN_SEGMENT_PINS[i].pin,
						    ((value>>i)&0x01));
	}
}
 196:	df 91       	pop	r29
 198:	cf 91       	pop	r28
 19a:	1f 91       	pop	r17
 19c:	0f 91       	pop	r16
 19e:	ff 90       	pop	r15
 1a0:	08 95       	ret

000001a2 <main>:
int main ()
{
	 u8 btn_state=0;
	 u8 flag_btn=0;
	 u8 number=0;
	 HDIO_SetPinDirection_vid(PORT_C,PIN0,DIO_IN);
 1a2:	40 e0       	ldi	r20, 0x00	; 0
 1a4:	60 e0       	ldi	r22, 0x00	; 0
 1a6:	83 e3       	ldi	r24, 0x33	; 51
 1a8:	0e 94 49 00 	call	0x92	; 0x92 <HDIO_SetPinDirection_vid>
	 SEVEN_SEGMENT_init(&s1);
 1ac:	80 e6       	ldi	r24, 0x60	; 96
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	0e 94 90 00 	call	0x120	; 0x120 <SEVEN_SEGMENT_init>
 
int main ()
{
	 u8 btn_state=0;
	 u8 flag_btn=0;
	 u8 number=0;
 1b4:	c0 e0       	ldi	r28, 0x00	; 0
 };
 
int main ()
{
	 u8 btn_state=0;
	 u8 flag_btn=0;
 1b6:	d0 e0       	ldi	r29, 0x00	; 0
	 HDIO_SetPinDirection_vid(PORT_C,PIN0,DIO_IN);
	 SEVEN_SEGMENT_init(&s1);
	
	 while (1)
	    {
		btn_state = HDIO_ReadPinValue_u8 (PORT_C , PIN0);
 1b8:	60 e0       	ldi	r22, 0x00	; 0
 1ba:	83 e3       	ldi	r24, 0x33	; 51
 1bc:	0e 94 61 00 	call	0xc2	; 0xc2 <HDIO_ReadPinValue_u8>
		if(btn_state==1&&flag_btn==0){
 1c0:	81 30       	cpi	r24, 0x01	; 1
 1c2:	39 f4       	brne	.+14     	; 0x1d2 <main+0x30>
 1c4:	d1 11       	cpse	r29, r1
 1c6:	05 c0       	rjmp	.+10     	; 0x1d2 <main+0x30>
			flag_btn=1;
			number++;
 1c8:	cf 5f       	subi	r28, 0xFF	; 255
			if(number==10){
 1ca:	ca 30       	cpi	r28, 0x0A	; 10
 1cc:	39 f0       	breq	.+14     	; 0x1dc <main+0x3a>
	
	 while (1)
	    {
		btn_state = HDIO_ReadPinValue_u8 (PORT_C , PIN0);
		if(btn_state==1&&flag_btn==0){
			flag_btn=1;
 1ce:	d1 e0       	ldi	r29, 0x01	; 1
 1d0:	09 c0       	rjmp	.+18     	; 0x1e4 <main+0x42>
			number++;
			if(number==10){
				number=0;
			}
		}
		else if(btn_state==0&&flag_btn==1){
 1d2:	81 11       	cpse	r24, r1
 1d4:	07 c0       	rjmp	.+14     	; 0x1e4 <main+0x42>
 1d6:	d1 30       	cpi	r29, 0x01	; 1
 1d8:	29 f4       	brne	.+10     	; 0x1e4 <main+0x42>
 1da:	03 c0       	rjmp	.+6      	; 0x1e2 <main+0x40>
		btn_state = HDIO_ReadPinValue_u8 (PORT_C , PIN0);
		if(btn_state==1&&flag_btn==0){
			flag_btn=1;
			number++;
			if(number==10){
				number=0;
 1dc:	c0 e0       	ldi	r28, 0x00	; 0
	
	 while (1)
	    {
		btn_state = HDIO_ReadPinValue_u8 (PORT_C , PIN0);
		if(btn_state==1&&flag_btn==0){
			flag_btn=1;
 1de:	d1 e0       	ldi	r29, 0x01	; 1
 1e0:	01 c0       	rjmp	.+2      	; 0x1e4 <main+0x42>
			if(number==10){
				number=0;
			}
		}
		else if(btn_state==0&&flag_btn==1){
			flag_btn=0;
 1e2:	d0 e0       	ldi	r29, 0x00	; 0
		}
		SEVEN_SEGMENT_write_value(&s1,number);
 1e4:	6c 2f       	mov	r22, r28
 1e6:	80 e6       	ldi	r24, 0x60	; 96
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	0e 94 ab 00 	call	0x156	; 0x156 <SEVEN_SEGMENT_write_value>
		}
 1ee:	e4 cf       	rjmp	.-56     	; 0x1b8 <main+0x16>

000001f0 <__vector_16>:
  return data;	
}
void ADC_select_channels(channel_select channel){
	sel_channels(channel);
}
ISR(ADC_vect){
 1f0:	1f 92       	push	r1
 1f2:	0f 92       	push	r0
 1f4:	0f b6       	in	r0, 0x3f	; 63
 1f6:	0f 92       	push	r0
 1f8:	11 24       	eor	r1, r1
 1fa:	2f 93       	push	r18
 1fc:	3f 93       	push	r19
 1fe:	4f 93       	push	r20
 200:	5f 93       	push	r21
 202:	6f 93       	push	r22
 204:	7f 93       	push	r23
 206:	8f 93       	push	r24
 208:	9f 93       	push	r25
 20a:	af 93       	push	r26
 20c:	bf 93       	push	r27
 20e:	ef 93       	push	r30
 210:	ff 93       	push	r31
	if(ADC_interruptHandler!=0){
 212:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <__data_end>
 216:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <__data_end+0x1>
 21a:	30 97       	sbiw	r30, 0x00	; 0
 21c:	09 f0       	breq	.+2      	; 0x220 <__vector_16+0x30>
		ADC_interruptHandler();
 21e:	09 95       	icall
	}
 220:	ff 91       	pop	r31
 222:	ef 91       	pop	r30
 224:	bf 91       	pop	r27
 226:	af 91       	pop	r26
 228:	9f 91       	pop	r25
 22a:	8f 91       	pop	r24
 22c:	7f 91       	pop	r23
 22e:	6f 91       	pop	r22
 230:	5f 91       	pop	r21
 232:	4f 91       	pop	r20
 234:	3f 91       	pop	r19
 236:	2f 91       	pop	r18
 238:	0f 90       	pop	r0
 23a:	0f be       	out	0x3f, r0	; 63
 23c:	0f 90       	pop	r0
 23e:	1f 90       	pop	r1
 240:	18 95       	reti

00000242 <DIO_SetPinDirection>:
	volatile u8 DDR;
	volatile u8 PORT;
}PORTx;

void DIO_SetPinDirection (DIO_cfg * DioConfig)
{
 242:	fc 01       	movw	r30, r24
	PORTx * PORT_t = (PORTx *)(DioConfig->port);
 244:	a0 81       	ld	r26, Z
 246:	b0 e0       	ldi	r27, 0x00	; 0

	if (DioConfig->direction == INPUT)
 248:	82 81       	ldd	r24, Z+2	; 0x02
 24a:	81 11       	cpse	r24, r1
 24c:	11 c0       	rjmp	.+34     	; 0x270 <DIO_SetPinDirection+0x2e>
	{
		CLR_BIT(&(PORT_t->DDR), DioConfig->pin);
 24e:	11 96       	adiw	r26, 0x01	; 1
 250:	2c 91       	ld	r18, X
 252:	11 97       	sbiw	r26, 0x01	; 1
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	01 80       	ldd	r0, Z+1	; 0x01
 25a:	02 c0       	rjmp	.+4      	; 0x260 <DIO_SetPinDirection+0x1e>
 25c:	88 0f       	add	r24, r24
 25e:	99 1f       	adc	r25, r25
 260:	0a 94       	dec	r0
 262:	e2 f7       	brpl	.-8      	; 0x25c <DIO_SetPinDirection+0x1a>
 264:	80 95       	com	r24
 266:	82 23       	and	r24, r18
 268:	11 96       	adiw	r26, 0x01	; 1
 26a:	8c 93       	st	X, r24
		DioConfig->error = NO_ERR;
 26c:	13 82       	std	Z+3, r1	; 0x03
 26e:	08 95       	ret
	}
	else if(DioConfig->direction == OUTPUT)
 270:	81 30       	cpi	r24, 0x01	; 1
 272:	81 f4       	brne	.+32     	; 0x294 <DIO_SetPinDirection+0x52>
	{
		SET_BIT(&(PORT_t->DDR), DioConfig->pin);
 274:	11 96       	adiw	r26, 0x01	; 1
 276:	2c 91       	ld	r18, X
 278:	11 97       	sbiw	r26, 0x01	; 1
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	01 80       	ldd	r0, Z+1	; 0x01
 280:	02 c0       	rjmp	.+4      	; 0x286 <DIO_SetPinDirection+0x44>
 282:	88 0f       	add	r24, r24
 284:	99 1f       	adc	r25, r25
 286:	0a 94       	dec	r0
 288:	e2 f7       	brpl	.-8      	; 0x282 <DIO_SetPinDirection+0x40>
 28a:	82 2b       	or	r24, r18
 28c:	11 96       	adiw	r26, 0x01	; 1
 28e:	8c 93       	st	X, r24
		DioConfig->error = NO_ERR;
 290:	13 82       	std	Z+3, r1	; 0x03
 292:	08 95       	ret
	}
	else
	{
		DioConfig->error = FAILED;
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	83 83       	std	Z+3, r24	; 0x03
 298:	08 95       	ret

0000029a <DIO_ReadPinValue>:
	}
}
u8 DIO_ReadPinValue (DIO_cfg * DioConfig)
{
	PORTx * PORT_t = (PORTx *)(DioConfig->port);
 29a:	dc 01       	movw	r26, r24
 29c:	ec 91       	ld	r30, X
 29e:	f0 e0       	ldi	r31, 0x00	; 0
	return READ_BIT(&(PORT_t->PIN), DioConfig->pin);
 2a0:	40 81       	ld	r20, Z
 2a2:	11 96       	adiw	r26, 0x01	; 1
 2a4:	5c 91       	ld	r21, X
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	9c 01       	movw	r18, r24
 2ac:	05 2e       	mov	r0, r21
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <DIO_ReadPinValue+0x1a>
 2b0:	22 0f       	add	r18, r18
 2b2:	33 1f       	adc	r19, r19
 2b4:	0a 94       	dec	r0
 2b6:	e2 f7       	brpl	.-8      	; 0x2b0 <DIO_ReadPinValue+0x16>
 2b8:	84 2f       	mov	r24, r20
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	82 23       	and	r24, r18
 2be:	93 23       	and	r25, r19
 2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <DIO_ReadPinValue+0x2c>
 2c2:	95 95       	asr	r25
 2c4:	87 95       	ror	r24
 2c6:	5a 95       	dec	r21
 2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <DIO_ReadPinValue+0x28>
}
 2ca:	08 95       	ret

000002cc <DIO_SetPinValue>:

void DIO_SetPinValue (DIO_cfg * DioConfig,u8 state)
{
 2cc:	dc 01       	movw	r26, r24
	PORTx * PORT_t = (PORTx *)(DioConfig->port);
 2ce:	ec 91       	ld	r30, X
 2d0:	f0 e0       	ldi	r31, 0x00	; 0
	if (state == HIGH)
 2d2:	61 30       	cpi	r22, 0x01	; 1
 2d4:	81 f4       	brne	.+32     	; 0x2f6 <DIO_SetPinValue+0x2a>
	{
		SET_BIT(&(PORT_t->PORT), DioConfig->pin);
 2d6:	22 81       	ldd	r18, Z+2	; 0x02
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	11 96       	adiw	r26, 0x01	; 1
 2de:	0c 90       	ld	r0, X
 2e0:	11 97       	sbiw	r26, 0x01	; 1
 2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <DIO_SetPinValue+0x1c>
 2e4:	88 0f       	add	r24, r24
 2e6:	99 1f       	adc	r25, r25
 2e8:	0a 94       	dec	r0
 2ea:	e2 f7       	brpl	.-8      	; 0x2e4 <DIO_SetPinValue+0x18>
 2ec:	82 2b       	or	r24, r18
 2ee:	82 83       	std	Z+2, r24	; 0x02
		DioConfig->error = NO_ERR;
 2f0:	13 96       	adiw	r26, 0x03	; 3
 2f2:	1c 92       	st	X, r1
 2f4:	08 95       	ret
	}
	else if(state == LOW)
 2f6:	61 11       	cpse	r22, r1
 2f8:	11 c0       	rjmp	.+34     	; 0x31c <DIO_SetPinValue+0x50>
	{
		CLR_BIT(&(PORT_t->PORT), DioConfig->pin);
 2fa:	22 81       	ldd	r18, Z+2	; 0x02
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	11 96       	adiw	r26, 0x01	; 1
 302:	0c 90       	ld	r0, X
 304:	11 97       	sbiw	r26, 0x01	; 1
 306:	02 c0       	rjmp	.+4      	; 0x30c <DIO_SetPinValue+0x40>
 308:	88 0f       	add	r24, r24
 30a:	99 1f       	adc	r25, r25
 30c:	0a 94       	dec	r0
 30e:	e2 f7       	brpl	.-8      	; 0x308 <DIO_SetPinValue+0x3c>
 310:	80 95       	com	r24
 312:	82 23       	and	r24, r18
 314:	82 83       	std	Z+2, r24	; 0x02
		DioConfig->error = NO_ERR;
 316:	13 96       	adiw	r26, 0x03	; 3
 318:	1c 92       	st	X, r1
 31a:	08 95       	ret
	}
	else
	{
		DioConfig->error = FAILED;
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	13 96       	adiw	r26, 0x03	; 3
 320:	8c 93       	st	X, r24
 322:	08 95       	ret

00000324 <_exit>:
 324:	f8 94       	cli

00000326 <__stop_program>:
 326:	ff cf       	rjmp	.-2      	; 0x326 <__stop_program>
